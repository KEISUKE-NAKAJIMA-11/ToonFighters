//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CONSTANT_BUFFER
// {
//
//   float white_point;                 // Offset:    0 Size:     4
//      = 0x40400000 
//   float average_gray;                // Offset:    4 Size:     4
//      = 0x3f92d0e5 
//   float brightness;                  // Offset:    8 Size:     4
//      = 0x00000000 
//   float contrast;                    // Offset:   12 Size:     4
//      = 0x00000000 
//   float hue;                         // Offset:   16 Size:     4
//      = 0x00000000 
//   float saturation;                  // Offset:   20 Size:     4
//      = 0x00000000 
//   float offset;                      // Offset:   24 Size:     4
//      = 0x00000000 
//   float darkness;                    // Offset:   28 Size:     4
//      = 0x00000000 
//   float3 colour_filter;              // Offset:   32 Size:    12
//      = 0x3f800000 0x3f800000 0x3f800000 
//   float amount;                      // Offset:   44 Size:     4
//      = 0x00000000 
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// point_sampler_state               sampler      NA          NA             s0      1 
// hdr_colour_map                    texture  float4          2d             t0      1 
// average_luminance                 texture  float4          2d             t1      1 
// CONSTANT_BUFFER                   cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// SV_SAMPLEINDEX           0   x           2   SAMPLE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 4
resinfo_indexable(texture2d)(float,float,float,float)_uint r0.x, l(0), t1.wxyz
iadd r0.x, r0.x, l(-1)
utof r0.x, r0.x
sample_l_indexable(texture2d)(float,float,float,float) r0.x, l(0.500000, 0.500000, 0.000000, 0.000000), t1.xyzw, s0, r0.x
add r0.x, r0.x, l(0.001000)
div r0.x, cb0[0].y, r0.x
mul r0.y, r0.x, r0.x
mul r0.z, cb0[0].x, cb0[0].x
div r0.y, r0.y, r0.z
add r0.y, r0.y, r0.x
add r0.x, r0.x, l(1.000000)
div r0.x, r0.y, r0.x
sample_indexable(texture2d)(float,float,float,float) r0.yzw, v1.xyxx, t0.wxyz, s0
max r0.yzw, r0.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
mad r0.xyz, r0.yzwy, r0.xxxx, cb0[0].zzzz
add r1.xyz, r0.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
add r0.w, cb0[0].w, l(1.000000)
mad r2.xyz, r1.xyzx, r0.wwww, l(0.500000, 0.500000, 0.500000, 0.000000)
lt r0.w, cb0[0].w, l(0.000000)
movc r0.xyz, r0.wwww, r2.xyzx, r0.xyzx
add r0.w, -cb0[0].w, l(1.000000)
div r1.xyz, r1.xyzx, r0.wwww
add r1.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
lt r0.w, l(0.000000), cb0[0].w
movc r0.xyz, r0.wwww, r1.xyzx, r0.xyzx
mul r0.w, cb0[1].x, l(3.141593)
sincos r1.x, r2.x, r0.w
add r3.z, r2.x, r2.x
mad r3.xy, r1.xxxx, l(-1.732051, 1.732051, 0.000000, 0.000000), -r2.xxxx
add r1.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r1.xyz, r1.xyzx, l(0.333333, 0.333333, 0.333333, 0.000000)
dp3 r2.y, r0.yzxy, r1.xyzx
dp3 r2.z, r0.zxyz, r1.xyzx
dp3 r2.w, r0.xyzx, r1.xyzx
add r0.x, r2.z, r2.y
add r0.x, r2.w, r0.x
mad r0.xyz, r0.xxxx, l(0.333333, 0.333333, 0.333333, 0.000000), -r2.yzwy
mad r1.xyz, r0.xyzx, -cb0[1].yyyy, r2.yzwy
add r3.xy, -cb0[1].ywyy, l(1.001000, 1.000000, 0.000000, 0.000000)
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
add r0.w, -r0.w, l(1.000000)
mad r0.xyz, r0.xyzx, r0.wwww, r2.yzwy
lt r0.w, l(0.000000), cb0[1].y
movc r0.xzw, r0.wwww, r0.xxzy, r1.xxzy
mad r1.xyz, cb0[2].wwww, l(-0.607000, 0.769000, 0.189000, 0.000000), l(1.000000, 0.000000, 0.000000, 0.000000)
dp3 r0.y, r0.xwzx, r1.xyzx
mad r1.xyz, cb0[2].wwww, l(0.349000, -0.314000, 0.168000, 0.000000), l(0.000000, 1.000000, 0.000000, 0.000000)
dp3 r0.x, r0.ywzy, r1.xyzx
mad r1.xyz, cb0[2].wwww, l(0.272000, 0.534000, -0.869000, 0.000000), l(0.000000, 0.000000, 1.000000, 0.000000)
dp3 r0.w, r0.yxzy, r1.xyzx
add r1.xyz, -r0.yxwy, r3.yyyy
add r2.xy, v1.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
mul r2.xy, r2.xyxx, cb0[1].zzzz
dp2 r0.z, r2.xyxx, r2.xyxx
mad r0.xyz, r0.zzzz, r1.xyzx, r0.yxwy
mul o0.xyz, r0.xyzx, cb0[2].xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 58 instruction slots used
