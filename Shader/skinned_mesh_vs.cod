//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CONSTANT_BUFFER
// {
//
//   row_major float4x4 world_view_projection;// Offset:    0 Size:    64
//   row_major float4x4 world;          // Offset:   64 Size:    64
//   float4 material_color;             // Offset:  128 Size:    16
//   float4 light_direction;            // Offset:  144 Size:    16
//   row_major float4x4 bone_transforms[32];// Offset:  160 Size:  2048
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CONSTANT_BUFFER                   cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// WEIGHTS                  0   xyzw        3     NONE   float   xyzw
// BONES                    0   xyzw        4     NONE    uint   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[138], dynamicIndexed
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v2.xy
dcl_input v3.xyzw
dcl_input v4.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xy
dcl_temps 3
ishl r0.xyzw, v4.xyzw, l(2, 2, 2, 2)
mul r1.xyz, v0.yyyy, cb0[r0.y + 11].xyzx
mad r1.xyz, v0.xxxx, cb0[r0.y + 10].xyzx, r1.xyzx
mad r1.xyz, v0.zzzz, cb0[r0.y + 12].xyzx, r1.xyzx
mad r1.xyz, v0.wwww, cb0[r0.y + 13].xyzx, r1.xyzx
mul r1.xyz, r1.xyzx, v3.yyyy
mul r2.xyz, v0.yyyy, cb0[r0.x + 11].xyzx
mad r2.xyz, v0.xxxx, cb0[r0.x + 10].xyzx, r2.xyzx
mad r2.xyz, v0.zzzz, cb0[r0.x + 12].xyzx, r2.xyzx
mad r2.xyz, v0.wwww, cb0[r0.x + 13].xyzx, r2.xyzx
mad r1.xyz, v3.xxxx, r2.xyzx, r1.xyzx
mul r2.xyz, v0.yyyy, cb0[r0.z + 11].xyzx
mad r2.xyz, v0.xxxx, cb0[r0.z + 10].xyzx, r2.xyzx
mad r2.xyz, v0.zzzz, cb0[r0.z + 12].xyzx, r2.xyzx
mad r2.xyz, v0.wwww, cb0[r0.z + 13].xyzx, r2.xyzx
mad r1.xyz, v3.zzzz, r2.xyzx, r1.xyzx
mul r2.xyz, v0.yyyy, cb0[r0.w + 11].xyzx
mad r2.xyz, v0.xxxx, cb0[r0.w + 10].xyzx, r2.xyzx
mad r2.xyz, v0.zzzz, cb0[r0.w + 12].xyzx, r2.xyzx
mad r2.xyz, v0.wwww, cb0[r0.w + 13].xyzx, r2.xyzx
mad r1.xyz, v3.wwww, r2.xyzx, r1.xyzx
mul r2.xyzw, r1.yyyy, cb0[1].xyzw
mad r2.xyzw, r1.xxxx, cb0[0].xyzw, r2.xyzw
mad r1.xyzw, r1.zzzz, cb0[2].xyzw, r2.xyzw
add o0.xyzw, r1.xyzw, cb0[3].xyzw
mul r1.xyz, v1.yyyy, cb0[r0.y + 11].xyzx
mad r1.xyz, v1.xxxx, cb0[r0.y + 10].xyzx, r1.xyzx
mad r1.xyz, v1.zzzz, cb0[r0.y + 12].xyzx, r1.xyzx
mul r1.xyz, r1.xyzx, v3.yyyy
mul r2.xyz, v1.yyyy, cb0[r0.x + 11].xyzx
mad r2.xyz, v1.xxxx, cb0[r0.x + 10].xyzx, r2.xyzx
mad r2.xyz, v1.zzzz, cb0[r0.x + 12].xyzx, r2.xyzx
mad r1.xyz, v3.xxxx, r2.xyzx, r1.xyzx
mul r2.xyz, v1.yyyy, cb0[r0.z + 11].xyzx
mad r2.xyz, v1.xxxx, cb0[r0.z + 10].xyzx, r2.xyzx
mad r0.xyz, v1.zzzz, cb0[r0.z + 12].xyzx, r2.xyzx
mad r0.xyz, v3.zzzz, r0.xyzx, r1.xyzx
mul r1.xyz, v1.yyyy, cb0[r0.w + 11].xyzx
mad r1.xyz, v1.xxxx, cb0[r0.w + 10].xyzx, r1.xyzx
mad r1.xyz, v1.zzzz, cb0[r0.w + 12].xyzx, r1.xyzx
mad r0.xyz, v3.wwww, r1.xyzx, r0.xyzx
mul r1.xyzw, r0.yyyy, cb0[5].xyzw
mad r1.xyzw, r0.xxxx, cb0[4].xyzw, r1.xyzw
mad r0.xyzw, r0.zzzz, cb0[6].xyzw, r1.xyzw
dp4 r1.x, r0.xyzw, r0.xyzw
rsq r1.x, r1.x
mul r0.xyzw, r0.xyzw, r1.xxxx
dp4 r1.x, -cb0[9].xyzw, -cb0[9].xyzw
rsq r1.x, r1.x
mul r1.xyzw, r1.xxxx, -cb0[9].xyzw
dp4 r0.x, r1.xyzw, r0.xyzw
max r0.x, r0.x, l(0.000000)
mul o1.xyz, r0.xxxx, cb0[8].xyzx
mov o1.w, cb0[8].w
mov o2.xy, v2.xyxx
ret 
// Approximately 56 instruction slots used
