//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CbScene
// {
//
//   row_major float4x4 view;           // Offset:    0 Size:    64 [unused]
//   row_major float4x4 view_projection;// Offset:   64 Size:    64
//   row_major float4x4 prevview_projection;// Offset:  128 Size:    64
//   float4 light_direction;            // Offset:  192 Size:    16 [unused]
//   row_major float4x4 da;             // Offset:  208 Size:    64 [unused]
//   row_major float4x4 d2;             // Offset:  272 Size:    64 [unused]
//   float4 eye_position;               // Offset:  336 Size:    16 [unused]
//   float4 light_color;                // Offset:  352 Size:    16 [unused]
//   float4 outoline;                   // Offset:  368 Size:    16 [unused]
//   float4 camera_front;               // Offset:  384 Size:    16 [unused]
//
// }
//
// cbuffer CbMesh
// {
//
//   row_major float4x4 bone_transforms[32];// Offset:    0 Size:  2048
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CbScene                           cbuffer      NA          NA            cb0      1 
// CbMesh                            cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float       
// WEIGHTS                  0   xyzw        3     NONE   float   xyzw
// BONES                    0   xyzw        4     NONE    uint   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float       
// TEXCOORD                 1     zw        1     NONE   float     zw
// COLOR                    0   xyzw        2     NONE   float       
// WORLD_POSITION           0   xyzw        3     NONE   float   xyzw
// WORLD_NORMAL             0   xyzw        4     NONE   float   xyzw
// TEXCOORD                 2   xyz         5     NONE   float       
// TEXCOORD                 3   xyz         6     NONE   float       
// TEXCOORD                 4   xyz         7     NONE   float       
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[12], immediateIndexed
dcl_constantbuffer CB1[128], dynamicIndexed
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v3.xyzw
dcl_input v4.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.zw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_temps 5
ishl r0.xyzw, v4.xyzw, l(2, 2, 2, 2)
mul r1.xyz, v0.yyyy, cb1[r0.y + 1].xyzx
mad r1.xyz, v0.xxxx, cb1[r0.y + 0].xyzx, r1.xyzx
mad r1.xyz, v0.zzzz, cb1[r0.y + 2].xyzx, r1.xyzx
mad r1.xyz, v0.wwww, cb1[r0.y + 3].xyzx, r1.xyzx
mul r1.xyz, r1.xyzx, v3.yyyy
mul r2.xyz, v0.yyyy, cb1[r0.x + 1].xyzx
mad r2.xyz, v0.xxxx, cb1[r0.x + 0].xyzx, r2.xyzx
mad r2.xyz, v0.zzzz, cb1[r0.x + 2].xyzx, r2.xyzx
mad r2.xyz, v0.wwww, cb1[r0.x + 3].xyzx, r2.xyzx
mad r1.xyz, v3.xxxx, r2.xyzx, r1.xyzx
mul r2.xyz, v0.yyyy, cb1[r0.z + 1].xyzx
mad r2.xyz, v0.xxxx, cb1[r0.z + 0].xyzx, r2.xyzx
mad r2.xyz, v0.zzzz, cb1[r0.z + 2].xyzx, r2.xyzx
mad r2.xyz, v0.wwww, cb1[r0.z + 3].xyzx, r2.xyzx
mad r1.xyz, v3.zzzz, r2.xyzx, r1.xyzx
mul r2.xyz, v0.yyyy, cb1[r0.w + 1].xyzx
mad r2.xyz, v0.xxxx, cb1[r0.w + 0].xyzx, r2.xyzx
mad r2.xyz, v0.zzzz, cb1[r0.w + 2].xyzx, r2.xyzx
mad r2.xyz, v0.wwww, cb1[r0.w + 3].xyzx, r2.xyzx
mad r1.xyz, v3.wwww, r2.xyzx, r1.xyzx
mul r2.xyzw, r1.yyyy, cb0[5].xyzw
mad r2.xyzw, r1.xxxx, cb0[4].xyzw, r2.xyzw
mad r2.xyzw, r1.zzzz, cb0[6].xyzw, r2.xyzw
add r2.xyzw, r2.xyzw, cb0[7].xyzw
mov o0.xyzw, r2.xyzw
div r2.xy, r2.xyxx, r2.wwww
mov o3.w, l(1.000000)
mov o3.xyz, r1.xyzx
mul r3.xyz, v1.yyyy, cb1[r0.y + 1].xyzx
mad r3.xyz, v1.xxxx, cb1[r0.y + 0].xyzx, r3.xyzx
mad r3.xyz, v1.zzzz, cb1[r0.y + 2].xyzx, r3.xyzx
mul r3.xyz, r3.xyzx, v3.yyyy
mul r4.xyz, v1.yyyy, cb1[r0.x + 1].xyzx
mad r4.xyz, v1.xxxx, cb1[r0.x + 0].xyzx, r4.xyzx
mad r4.xyz, v1.zzzz, cb1[r0.x + 2].xyzx, r4.xyzx
mad r3.xyz, v3.xxxx, r4.xyzx, r3.xyzx
mul r4.xyz, v1.yyyy, cb1[r0.z + 1].xyzx
mad r4.xyz, v1.xxxx, cb1[r0.z + 0].xyzx, r4.xyzx
mad r0.xyz, v1.zzzz, cb1[r0.z + 2].xyzx, r4.xyzx
mad r0.xyz, v3.zzzz, r0.xyzx, r3.xyzx
mul r3.xyz, v1.yyyy, cb1[r0.w + 1].xyzx
mad r3.xyz, v1.xxxx, cb1[r0.w + 0].xyzx, r3.xyzx
mad r3.xyz, v1.zzzz, cb1[r0.w + 2].xyzx, r3.xyzx
mad o4.xyz, v3.wwww, r3.xyzx, r0.xyzx
mov o4.w, l(1.000000)
mul r0.xyz, r1.yyyy, cb0[9].xywx
mad r0.xyz, r1.xxxx, cb0[8].xywx, r0.xyzx
mad r0.xyz, r1.zzzz, cb0[10].xywx, r0.xyzx
add r0.xyz, r0.xyzx, cb0[11].xywx
div r0.xy, r0.xyxx, r0.zzzz
add r0.xy, -r0.xyxx, r2.xyxx
mul o1.zw, r0.xxxy, l(0.000000, 0.000000, 500.000000, 500.000000)
ret 
// Approximately 54 instruction slots used
